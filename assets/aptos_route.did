type AptosPortAction = record {
  package : text;
  upgrade_cap : text;
  ticket_table : text;
  port_owner_cap : text;
  functions : vec text;
  module : text;
};
type AptosToken = record {
  treasury_cap : text;
  metadata : text;
  package : text;
  upgrade_cap : text;
  functions : vec text;
  module : text;
  type_tag : text;
};
type Chain = record {
  fee_token : opt text;
  canister_id : text;
  chain_id : text;
  counterparties : opt vec text;
  chain_state : ChainState;
  chain_type : ChainType;
  contract_address : opt text;
};
type ChainState = variant { Active; Deactive };
type ChainType = variant { SettlementChain; ExecutionChain };
type InitArgs = record {
  admin : principal;
  hub_principal : principal;
  gas_budget : opt nat64;
  fee_account : text;
  rpc_provider : opt Provider;
  chain_id : text;
  schnorr_key_name : opt text;
  chain_state : ChainState;
  nodes_in_subnet : opt nat32;
};
type KeyType = variant { Native : blob; ChainKey };
type MultiRpcConfig = record {
  rpc_list : vec text;
  minimum_response_count : nat32;
};
type Permission = variant { Update; Query };
type Provider = variant {
  Mainnet;
  Custom : record { text; text };
  Testnet;
  Devnet;
  Localnet;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : text; Err : RpcError };
type Result_2 = variant { Ok; Err : text };
type Result_3 = variant { Ok : bool; Err : RpcError };
type RouteArg = variant { Upgrade : opt UpgradeArgs; Init : InitArgs };
type RouteConfig = record {
  sui_port_action : AptosPortAction;
  admin : principal;
  hub_principal : principal;
  caller_perms : vec record { text; Permission };
  active_tasks : vec TaskType;
  gas_budget : nat64;
  enable_debug : bool;
  fee_account : text;
  seqs : Seqs;
  rpc_provider : Provider;
  chain_id : text;
  schnorr_key_name : text;
  target_chain_factor : vec record { text; nat };
  multi_rpc_config : MultiRpcConfig;
  key_type : KeyType;
  chain_state : ChainState;
  forward : opt text;
  nodes_in_subnet : nat32;
  fee_token_factor : opt nat;
};
type RpcError = variant {
  Text : text;
  ParseError : text;
  RpcResponseError : record { code : int64; data : opt text; message : text };
  RpcRequestError : text;
};
type Seqs = record {
  next_directive_seq : nat64;
  next_ticket_seq : nat64;
  tx_seq : nat64;
};
type SnorKeyType = variant { Native; ChainKey };
type TaskType = variant {
  GetTickets;
  ClearTicket;
  BurnToken;
  GetDirectives;
  MintToken;
  UpdateToken;
};
type Token = record {
  decimals : nat8;
  token_id : text;
  metadata : vec record { text; text };
  icon : opt text;
  name : text;
  symbol : text;
};
type TokenResp = record {
  decimals : nat8;
  token_id : text;
  icon : opt text;
  rune_id : opt text;
  symbol : text;
};
type UpgradeArgs = record {
  admin : opt principal;
  hub_principal : opt principal;
  gas_budget : opt nat64;
  fee_account : opt text;
  rpc_provider : opt Provider;
  chain_id : opt text;
  schnorr_key_name : opt text;
  chain_state : opt ChainState;
  nodes_in_subnet : opt nat32;
};
service : (RouteArg) -> {
  add_token : (Token) -> (opt Token);
  aptos_port_info : () -> (AptosPortAction) query;
  aptos_route_address : (SnorKeyType) -> (Result);
  aptos_token : (text) -> (opt AptosToken) query;
  forward : () -> (opt text) query;
  get_account : (text, opt nat64) -> (Result_1);
  get_chain_list : () -> (vec Chain) query;
  get_fee_account : () -> (text) query;
  get_gas_budget : () -> (nat64);
  get_redeem_fee : (text) -> (opt nat) query;
  get_route_config : () -> (RouteConfig) query;
  get_token : (text) -> (opt Token) query;
  get_token_list : () -> (vec TokenResp) query;
  rpc_provider : () -> (Provider) query;
  transfer_aptos_from_route : (text, nat64, SnorKeyType) -> (Result_1);
  update_aptos_port_info : (AptosPortAction) -> ();
  update_aptos_token : (text, AptosToken) -> (Result_2);
  update_gas_budget : (nat64) -> ();
  update_rpc_provider : (Provider) -> ();
  verfy_txn : (text, nat64, SnorKeyType) -> (Result_3);
}
