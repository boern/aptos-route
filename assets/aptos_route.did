type CallError = record { method : text; reason : Reason };
type Chain = record {
  fee_token : opt text;
  canister_id : text;
  chain_id : text;
  counterparties : opt vec text;
  chain_state : ChainState;
  chain_type : ChainType;
  contract_address : opt text;
};
type ChainState = variant { Active; Deactive };
type ChainType = variant { SettlementChain; ExecutionChain };
type GenerateTicketError = variant {
  InsufficientRedeemFee : record { provided : nat64; required : nat64 };
  SendTicketErr : text;
  TemporarilyUnavailable : text;
  InsufficientAllowance : record { allowance : nat64 };
  TransferFailure : text;
  UnsupportedAction : text;
  RedeemFeeNotSet;
  UnsupportedChainId : text;
  UnsupportedToken : text;
  InsufficientFunds : record { balance : nat64 };
};
type GenerateTicketOk = record { ticket_id : text };
type GenerateTicketReq = record {
  action : TxAction;
  token_id : text;
  memo : opt text;
  sender : text;
  target_chain_id : text;
  digest : text;
  amount : nat64;
  receiver : text;
};
type InitArgs = record {
  admin : principal;
  hub_principal : principal;
  gas_budget : opt nat64;
  fee_account : text;
  rpc_provider : opt Provider;
  chain_id : text;
  schnorr_key_name : opt text;
  chain_state : ChainState;
  nodes_in_subnet : opt nat32;
};
type KeyType = variant { Native : blob; ChainKey };
type MintTokenRequest = record {
  status : TxStatus;
  object : opt text;
  token_id : text;
  recipient : text;
  ticket_id : text;
  digest : opt text;
  amount : nat64;
  retry : nat64;
};
type MultiRpcConfig = record {
  rpc_list : vec text;
  minimum_response_count : nat32;
};
type Permission = variant { Update; Query };
type Provider = variant {
  Mainnet;
  Custom : record { text; text };
  Testnet;
  Devnet;
  Localnet;
};
type Reason = variant {
  QueueIsFull;
  CanisterError : text;
  OutOfCycles;
  Rejected : text;
  TxError : text;
};
type Result = variant { Ok : text; Err : RpcError };
type Result_1 = variant { Ok : bool; Err : RpcError };
type Result_10 = variant { Ok; Err : text };
type Result_2 = variant { Ok : GenerateTicketOk; Err : GenerateTicketError };
type Result_3 = variant { Ok : nat; Err : RpcError };
type Result_4 = variant { Ok : nat64; Err : RpcError };
type Result_5 = variant { Ok : MintTokenRequest; Err : CallError };
type Result_6 = variant { Ok : TxStatus; Err : CallError };
type Result_7 = variant { Ok : opt text; Err : CallError };
type Result_8 = variant { Ok; Err : RpcError };
type Result_9 = variant { Ok : text; Err : text };
type RouteArg = variant { Upgrade : opt UpgradeArgs; Init : InitArgs };
type RpcError = variant {
  Text : text;
  ParseError : text;
  RpcResponseError : record { code : int64; data : opt text; message : text };
  RpcRequestError : text;
};
type Seqs = record { next_directive_seq : nat64; next_ticket_seq : nat64 };
type SnorKeyType = variant { Native; ChainKey };
type SuiPortAction = record {
  package : text;
  upgrade_cap : text;
  ticket_table : text;
  port_owner_cap : text;
  functions : vec text;
  module : text;
};
type SuiRouteConfig = record {
  sui_port_action : SuiPortAction;
  admin : principal;
  hub_principal : principal;
  caller_perms : vec record { text; Permission };
  active_tasks : vec TaskType;
  gas_budget : nat64;
  enable_debug : bool;
  fee_account : text;
  seqs : Seqs;
  rpc_provider : Provider;
  chain_id : text;
  schnorr_key_name : text;
  target_chain_factor : vec record { text; nat };
  multi_rpc_config : MultiRpcConfig;
  key_type : KeyType;
  chain_state : ChainState;
  forward : opt text;
  nodes_in_subnet : nat32;
  fee_token_factor : opt nat;
};
type SuiToken = record {
  treasury_cap : text;
  metadata : text;
  package : text;
  upgrade_cap : text;
  functions : vec text;
  module : text;
  type_tag : text;
};
type TaskType = variant {
  GetTickets;
  ClearTicket;
  BurnToken;
  GetDirectives;
  MintToken;
  UpdateToken;
};
type Token = record {
  decimals : nat8;
  token_id : text;
  metadata : vec record { text; text };
  icon : opt text;
  name : text;
  symbol : text;
};
type TokenResp = record {
  decimals : nat8;
  token_id : text;
  icon : opt text;
  rune_id : opt text;
  symbol : text;
};
type TxAction = variant { Burn; Redeem; Mint; Transfer };
type TxStatus = variant {
  New;
  Finalized;
  TxFailed : record { e : text };
  Pending;
};
type UpdateType = variant {
  Symbol : text;
  Icon : text;
  Name : text;
  Description : text;
};
type UpgradeArgs = record {
  admin : opt principal;
  hub_principal : opt principal;
  gas_budget : opt nat64;
  fee_account : opt text;
  rpc_provider : opt Provider;
  chain_id : opt text;
  schnorr_key_name : opt text;
  chain_state : opt ChainState;
  nodes_in_subnet : opt nat32;
};
service : {
  add_token : (Token) -> (opt Token);
  burn_token : (text, text) -> (Result);
  check_object_exists : (text, text) -> (Result_1);
  create_ticket_table : (text) -> (Result);
  drop_ticket_table : () -> (Result);
  fetch_coin : (text, opt text, nat64) -> (Result);
  forward : () -> (opt text) query;
  generate_ticket : (GenerateTicketReq) -> (Result_2);
  get_balance : (text, opt text) -> (Result_3);
  get_chain_list : () -> (vec Chain) query;
  get_coins : (text, opt text) -> (Result);
  get_events : (text) -> (Result);
  get_fee_account : () -> (text) query;
  get_gas_budget : () -> (nat64);
  get_gas_price : () -> (Result_4);
  get_object : (text) -> (Result);
  get_owner_objects : (text, opt text) -> (Result);
  get_redeem_fee : (text) -> (opt nat) query;
  get_route_config : () -> (SuiRouteConfig) query;
  get_token : (text) -> (opt Token) query;
  get_token_list : () -> (vec TokenResp) query;
  get_transaction_block : (text) -> (Result);
  merge_coin : (text, vec text) -> (Result);
  mint_to_with_ticket : (text, text, text, nat64) -> (Result);
  mint_token : (text, text, nat64) -> (Result);
  mint_token_req : (text) -> (Result_5) query;
  mint_token_reqs : (nat64, nat64) -> (vec MintTokenRequest) query;
  mint_token_status : (text) -> (Result_6) query;
  mint_token_tx_hash : (text) -> (Result_7) query;
  parse_redeem_events : (text) -> (Result_8);
  remove_ticket_from_port : (text) -> (Result);
  rpc_provider : () -> (Provider) query;
  split_coin : (text, nat64, text) -> (Result);
  sui_port_action : () -> (SuiPortAction) query;
  sui_route_address : (SnorKeyType) -> (Result_9);
  sui_sign : (blob, SnorKeyType) -> (Result_9);
  sui_token : (text) -> (opt SuiToken) query;
  transfer_objects : (text, vec text) -> (Result);
  transfer_sui : (text, nat64) -> (Result);
  update_gas_budget : (nat64) -> ();
  update_mint_token_req : (MintTokenRequest) -> (Result_5);
  update_rpc_provider : (Provider) -> ();
  update_sui_port_action : (SuiPortAction) -> ();
  update_sui_token : (text, SuiToken) -> (Result_10);
  update_token_meta : (text, UpdateType) -> (Result);
}