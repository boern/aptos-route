type AptosPort = record {
  port_owner : text;
  package : text;
  fee_addr : text;
  functions : vec text;
  module : text;
  aptos_route : text;
};
type AptosToken = record {
  status : TxStatus;
  fa_obj_id : opt text;
  type_tag : opt text;
  tx_hash : opt text;
  retry : nat64;
};
type BurnTokenReq = record {
  memo : opt text;
  fa_obj : text;
  burn_acmount : nat64;
};
type Chain = record {
  fee_token : opt text;
  canister_id : text;
  chain_id : text;
  counterparties : opt vec text;
  chain_state : ChainState;
  chain_type : ChainType;
  contract_address : opt text;
};
type ChainState = variant { Active; Deactive };
type ChainType = variant { SettlementChain; ExecutionChain };
type CreateTokenReq = record {
  decimals : nat8;
  token_id : text;
  project_uri : text;
  name : text;
  icon_uri : text;
  max_supply : opt nat;
  symbol : text;
};
type InitArgs = record {
  admin : principal;
  hub_principal : principal;
  gas_budget : opt nat64;
  fee_account : text;
  rpc_provider : opt Provider;
  chain_id : text;
  schnorr_key_name : opt text;
  chain_state : ChainState;
  nodes_in_subnet : opt nat32;
};
type KeyType = variant { Native : blob; ChainKey };
type MintTokenReq = record {
  token_id : text;
  recipient : text;
  ticket_id : text;
  mint_acmount : nat64;
  fa_obj : text;
};
type MultiRpcConfig = record {
  rpc_list : vec text;
  minimum_response_count : nat32;
};
type Permission = variant { Update; Query };
type Provider = variant {
  Mainnet;
  Custom : record { text; text };
  Testnet;
  Devnet;
  Localnet;
};
type ReqType = variant {
  CreateToken : CreateTokenReq;
  CollectFee : nat64;
  RemoveTicket : text;
  TransferApt : TransferReq;
  BurnToken : BurnTokenReq;
  MintToken : MintTokenReq;
  UpdateMeta : UpdateMetaReq;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : nat64; Err : text };
type Result_2 = variant { Ok : vec text; Err : text };
type Result_3 = variant { Ok; Err : text };
type RouteArg = variant { Upgrade : opt UpgradeArgs; Init : InitArgs };
type RouteConfig = record {
  admin : principal;
  hub_principal : principal;
  caller_perms : vec record { text; Permission };
  active_tasks : vec TaskType;
  gas_budget : nat64;
  enable_debug : bool;
  fee_account : text;
  seqs : Seqs;
  rpc_provider : Provider;
  current_port_package : opt text;
  chain_id : text;
  schnorr_key_name : text;
  target_chain_factor : vec record { text; nat };
  multi_rpc_config : MultiRpcConfig;
  key_type : KeyType;
  chain_state : ChainState;
  tx_opt : TxOptions;
  forward : opt text;
  nodes_in_subnet : nat32;
  fee_token_factor : opt nat;
};
type Seqs = record {
  next_directive_seq : nat64;
  next_ticket_seq : nat64;
  tx_seq : nat64;
};
type SnorKeyType = variant { Native; ChainKey };
type TaskType = variant { GetTickets; GetDirectives; MintToken; UpdateToken };
type Token = record {
  decimals : nat8;
  token_id : text;
  metadata : vec record { text; text };
  icon : opt text;
  name : text;
  symbol : text;
};
type TokenResp = record {
  decimals : nat8;
  token_id : text;
  icon : opt text;
  rune_id : opt text;
  symbol : text;
};
type TransferReq = record { recipient : text; amount : nat64 };
type TxOptions = record {
  max_gas_amount : nat64;
  chain_id : nat8;
  gas_unit_price : nat64;
  timeout_secs : nat64;
};
type TxStatus = variant {
  New;
  Finalized;
  TxFailed : record { e : text };
  Pending;
};
type UpdateMetaReq = record {
  decimals : opt nat8;
  token_id : text;
  project_uri : opt text;
  name : opt text;
  icon_uri : opt text;
  fa_obj : text;
  symbol : opt text;
};
type UpgradeArgs = record {
  admin : opt principal;
  hub_principal : opt principal;
  gas_budget : opt nat64;
  fee_account : opt text;
  rpc_provider : opt Provider;
  chain_id : opt text;
  schnorr_key_name : opt text;
  chain_state : opt ChainState;
  nodes_in_subnet : opt nat32;
};
service : {
  add_aptos_port : (AptosPort) -> ();
  add_token : (Token) -> (opt Token);
  aptos_ports : () -> (vec AptosPort) query;
  aptos_route_address : (SnorKeyType) -> (Result);
  aptos_token : (text) -> (opt AptosToken) query;
  forward : () -> (opt text) query;
  get_account : (text, opt nat64) -> (Result);
  get_account_balance : (text, opt text) -> (Result_1);
  get_chain_list : () -> (vec Chain) query;
  get_fa_obj_from_port : (text, text) -> (Result_2);
  get_fee_account : () -> (text) query;
  get_gas_budget : () -> (nat64);
  get_redeem_fee : (text) -> (opt nat) query;
  get_route_config : () -> (RouteConfig) query;
  get_token : (text) -> (opt Token) query;
  get_token_list : () -> (vec TokenResp) query;
  get_transaction_by_hash : (text) -> (Result);
  rpc_provider : () -> (Provider) query;
  submit_tx : (ReqType) -> (Result);
  update_aptos_token : (text, AptosToken) -> (Result_3);
  update_gas_budget : (nat64) -> ();
  update_port_package : (text) -> ();
  update_rpc_provider : (Provider) -> ();
  update_tx_option : (TxOptions) -> ();
}